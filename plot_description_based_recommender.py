# -*- coding: utf-8 -*-
"""Plot Description Based Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10CheuCL8S9NnS4iit2sZk5DkP3xaIK-d

# Plot Description Based Recommender
"""

import pandas as pd
import numpy as np

#Import data from the clean file 
df = pd.read_csv('movieeees.csv',usecols=['title','genres','keywords','year'])

#Print the head of the cleaned DataFrame
df.head(13454)

df.info()

df = df[df['year'] >= 2011]
df.index = range(len(df.index))

df.head(33)

df.info()

#df.columns = ['title','genres','year','duration','imdb_score','votes','overview']

df.shape

df2 = df

df2 = df2.set_index(['title'])

df2.loc['Batman v Superman: Dawn of Justice']

df3 = df2.reset_index()

df4 = df3['title']

df4 = df4.str.lower()

df4 = df4.to_frame()

df3['title'] = df4['title']

df['keywords'][343]

df3.head()



# Import TfIdfVectorizer from the scikit-learn library
from sklearn.feature_extraction.text import TfidfVectorizer

#Define a TF-IDF Vectorizer Object. Remove all english stopwords
tfidf = TfidfVectorizer(stop_words='english')

#Replace NaN with an empty string
df3['keywords'] = df3['keywords'].fillna('')

#Construct the required TF-IDF matrix by applying the fit_transform method on the overview feature
tfidf_matrix = tfidf.fit_transform(df3['keywords'])

#Output the shape of tfidf_matrix
tfidf_matrix.shape



import timeit
start = timeit.default_timer()

# Import linear_kernel to compute the dot product
from sklearn.metrics.pairwise import linear_kernel

# Compute the cosine similarity matrix
cosine = linear_kernel(tfidf_matrix, tfidf_matrix)


stop = timeit.default_timer()

print('Time: ', stop - start)

#import numpy as np

#np.save('coslg.np', cosine_sim , allow_pickle=True, fix_imports=True)

#w = np.load('coslg.npy', mmap_mode='r+', allow_pickle=False, fix_imports=True, encoding='ASCII')

w = cosine

w.dtype

w.nbytes

#Construct a reverse mapping of indices and movie titles, and drop duplicate titles, if any
indices = pd.Series(df3.index, index=df3['title']).drop_duplicates()

df3.iloc[0,0]

# Function that takes in movie title as input and gives recommendations 
def content_recommender(title, cosine_sim=w, df=df3, indices=indices):
    # Obtain the index of the movie that matches the title
    idx = indices[title]
    #id of title

    # Get the pairwsie similarity scores of all movies with that movie
    # And convert it into a list of tuples as described above
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the cosine similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar movies. Ignore the first movie.
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar movies
    return df3['title'].iloc[movie_indices]

#Get recommendations 
s = content_recommender('wrong turn 4: bloody beginnings')

s.to_list()



